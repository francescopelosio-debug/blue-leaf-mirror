--- a/lib/supabase/server.ts
+++ b/lib/supabase/server.ts
@@ -2,46 +2,34 @@
 import { cookies } from "next/headers";
 import { createServerClient, type CookieOptions } from "@supabase/ssr";
 
-/** Client SSR per Server Components / layout / pages */
-export async function getSupabaseServer() {
-  const cookieStore = await cookies();
-
-  return createServerClient(
-    process.env.NEXT_PUBLIC_SUPABASE_URL!,
-    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
-    {
-      cookies: {
-        get(name: string) {
-          return cookieStore.get(name)?.value;
-        },
-        set(name: string, value: string, options: CookieOptions) {
-          cookieStore.set({ name, value, ...(options ?? {}) });
-        },
-        remove(name: string, options: CookieOptions) {
-          cookieStore.set({ name, value: "", ...(options ?? {}) });
-        },
-      },
-    }
-  );
-}
-
-/** Client per Route Handlers (app/api/*) */
-export async function createClientForRoute() {
-  const cookieStore = await cookies();
-
-  return createServerClient(
-    process.env.NEXT_PUBLIC_SUPABASE_URL!,
-    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
-    {
-      cookies: {
-        get(name: string) {
-          return cookieStore.get(name)?.value;
-        },
-        set(name: string, value: string, options: CookieOptions) {
-          cookieStore.set({ name, value, ...(options ?? {}) });
-        },
-        remove(name: string, options: CookieOptions) {
-          cookieStore.set({ name, value: "", ...(options ?? {}) });
-        },
-      },
-    }
-  );
-}
+/**
+ * Server-side Supabase client for App Router (RSC, layouts, route handlers).
+ * Uses Next 15 async cookies() adapter so refresh token cookies can be set/cleared
+ * ONLY within a request/response lifecycle.
+ */
+export async function getSupabaseServer() {
+  const cookieStore = await cookies();
+
+  return createServerClient(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+      cookies: {
+        get(name: string) {
+          return cookieStore.get(name)?.value;
+        },
+        set(name: string, value: string, options: CookieOptions) {
+          // Ensure a consistent path for auth cookies
+          cookieStore.set({ name, value, ...(options ?? {}), path: (options as any)?.path ?? "/" });
+        },
+        remove(name: string, options: CookieOptions) {
+          // MaxAge 0 invalidates the cookie; keep path consistent
+          cookieStore.set({
+            name,
+            value: "",
+            ...(options ?? {}),
+            path: (options as any)?.path ?? "/",
+            maxAge: 0,
+          });
+        },
+      },
+    }
+  );
+}
